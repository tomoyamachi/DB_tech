* 1 データベースがないと何が困るのか
** 本書ではなにを扱っていくのか
データベースを使うとなぜ解決するか。
どうすれば解決するか。
* 2 インデックスで高速アクセスを実行する
** インデックスのデファクト 「B+Treeインデックス」
*** 探索の種類
- 二分木探索だと大量のデータを検索するときに、 O(N)回計算してしまう。
- 多分木構造をもつことで、計算量をへらす(ルート > ブランチ > リーフ)
- たとえばid=341の場所を検索すると。。。
ルートで 300 < id < 400のメモリの場所をしらせる
 -> ブランチで 340 < id < 350の場所をしらせる
 -> リーフでid=341のデータを返す
この方法をつかうと O(log2N) 回の計算ですむ。
  - B+Tree 情報があるのは必ずリーフ  デファクトスタンダード
  - B-Tree 情報がブランチにあることもある
** RDBMSではどのように最適化を実現しているのか
*** 一意のインデックスをはる
一意のインデックスをはることで、全件検索をおこなわずにすむ
*** マルチカラムインデックス
複数のキーを指定しなければ、一意のデータがさだまらないとき、複数のキーをしてインデックスをはる
*** インデックスマージ
1回の検索で2つ以上のインデックスを使用する
** 更新コスト削減のための取り組み

* デーブル設計とリレーション
** 正規化理論の基本
*** 第一正規化
同じテーブルのなかで、重複や繰り返しのある複合値をなくす
*** 第二正規化
プライマリキーが複数指定してあるが、ひとつのキーだけで一意の値が決まらないようにする
*** 第三正規化
他テーブルと齟齬が生まれるようなカラムをつくらない。

* SQL文の特徴とその使いこなし方
** テーブルを操作する
複数テーブルをまたぐ検索はJOINをつかうと、効率がいいことがおおい。
*** Sharding(テーブルを複数サーバに分ける場合)の注意点
複数サーバにわけると、JOINがつかえない。(つかえるものもあるが、リモートサーバとの連携なので遅い)
一度リリースすると、あとで取り返しがつきづらいので、テーブル設計の際に、JOIN検索が必要なものは同じサーバにおくよう設計
** SQL文の実行効率を意識する
重要なのはインデックスのついた値で検索すること
*** EXPLAINで、実行効率を確認
もっとも重要な指標は「rows」。
テーブル内のレコードにアクセスした回数が表示される。
*** slowqueryをみて、どの処理が重いのかを判定
*** 管理系のコマンドをつかう
- 秒間何件のSELECT,INSERT,UPDATE,DELETEが実行されているか
- 秒間何レコード読み書きしているか
- 秒間何回重いクエリが実行されているか
** SQLの長所と短所
習得が容易。
* 可用性とデータの複製
** データベースはどういうときに落ちるのか
- ソフトウェアの障害
- OSの障害
- ハードウェアの障害
- 操作のミス(人為)
** 冗長化　その1 ディスクの冗長化 RAID
ハードウェアでもっともこわれやすい、HDDへの対応。
1つのサーバのなかに、複数のHDDを搭載し、
同じデータをおなじサーバの2ヶ所以上のHDDに分散。
*** RAID 1   ミラーリング
容量に余裕があるとき
利用可能容量 (ディスク本数 の半分)
*** RAID 5   誤り訂正符号をデータとともに分散して保存
容量に余裕がないとき
利用可能容量 (ディスク数 - 1)
*** 1つのHDDがこわれたら性能劣化し、データがなくなる危険性があるので、ホットスワップで復旧させる
** 冗長化 その2 レプリケーション
複数のサーバに同じデータを保存
*** 片方向 非同期
MySQLのデフォルト。
マスタが更新されたとき、マスタのバイナリログをIOスレッドでスレーブサーバに投げる。
スレイブサーバはバイナリログを受け取ったあと、ログをみてデータを修正。
- 反映されないとき
  - スレイブサーバでバイナリログがうけとれていない
  - スレイブサーバでログの実行が終わっていない
*** 片方向 準同期
スレーブサーバが、バイナリログを受け取ったときに、マスタに受信したことを伝える。
マスタは、その信号をうけとるまで、処理がとまる。
*** 片方向 同期
あまりつかわれない
*** 双方向
トランザクションむずい。
** 人為ミス対策
*** バックアップのとりかた
おもいので常には走らせられない。1日1回程度。
*** バックアップをもどしたあと、最新の状態までもどす(ポイントインタイムリカバリ)
クラッシュした際は、バイナリログをみて、最終バックアップ時点からクラッシュ直前の状態までログを実行していく。
「更新ログのどの位置が最終バックアップ時点なのか」を特定するには、一時的に更新をとめ、バックアップをとり、その時点での更新ログの位置を特定。
RDBMSでは、トランザクションをもちいて、更新をとめることなくバックアップをとることができる。
*** Time Delayed Replication
故意に時間をおくらせてレプリケーションへ反映させる。
なにかがおこったら、レプリケーションへの反映をとりけし、復元。
* トランザクションと整合性、耐障害性
** トランザクションの大切さを理解する
** ロック機構による排他制御
** レプリケーションとトランザクション
* ストレージ技術の変遷とデータベースへの影響

* データベース運用技術の勘どころ

* MySQLに学ぶデータベース管理

* MySQLのソースコードを追ってみよう

* データベース技術の現在と未来

* ビッグデータ時代のデータベース設計
